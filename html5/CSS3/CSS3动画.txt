div {
			width: 200px;
			height: 100px;
			background-color: pink;
			/* transition: 要过渡的属性  花费时间  运动曲线  何时开始; */
			transition: width 0.6s ease 0s, height 0.3s ease-in 1s;
			/* transtion 过渡的意思  这句话写到div里面而不是 hover里面 */
  
			
}
div:hover {  /* 鼠标经过盒子，我们的宽度变为400 */

			width: 600px;
			height: 300px
}

transition: all 0.6s;  /* 所有属性都变化用all 就可以了  后面俩个属性可以省略 */

animation: rotate 2s linear infinite;//旋转
	    -webkit-transform: rotate(360deg);
            -moz-transform: rotate(360deg);
            -ms-transform: rotate(360deg);
            -o-transform: rotate(360deg);
            transform: rotate(360deg);

-------------------旋转----------------
@-webkit-keyframes rotation{
from {-webkit-transform: rotate(0deg);}
to {-webkit-transform: rotate(360deg);}
}

.Rotation{
-webkit-transform: rotate(360deg);
animation: rotation 3s linear infinite;
-moz-animation: rotation 3s linear infinite;
-webkit-animation: rotation 3s linear infinite;
-o-animation: rotation 3s linear infinite;
}

focus 聚焦


!important  我最大  层级级别最高

transition    过渡动画
	transform    2D变形
	translate     位移
	rotate       旋转
	scale        缩放
	skew        斜切
	transform-origin  旋转中心点
	perspective    透视


---------------------------------------动画------------
动画可以添加多个关键帧



--------------------------
设置列数
column-count:3;
-----------------------伸缩布局--------------
 /*flex-flow:是flex-wrap和flex-direction的综合
            flex-wrap:控制子元素是否换行显示，默认不换行
                nowrap:不换行--则收缩
                wrap:换行
                wrap-reverse:翻转，原来是从上到下，翻转后就是从下到上来排列*/
            /*flex-wrap: wrap;*/
            /*flex-direction：设置子元素的排列方向：就是用来主轴方向，默认主轴方向是row(水平方向)
                row:水平排列方向，从左到右
                row-reverse:水平排列方向，从右到左
                column:垂直排列方向，从上到下
                column-reverse：垂直排列方向，从下到上*/
            /*flex-direction: column-reverse;*/

----------------伸缩------计算剩余空间------------
/*flow-grow:可以来扩展子元素的宽度：设置当前元素应该占据剩余空间的比例值
            比例值计算 ：当前空间的flex-grow/所有兄弟元素的flex-grow的和
            flex-grow的默认是0:说明子元素并不会去占据剩余的空间*/
            flex-grow: 1;
----------------伸缩------收缩------------
/*设置父容器为盒子：会使每一个子元素自动变成伸缩项
             当子元素的宽度和大于父容器宽度的时候，子元素会自动平均收缩*/
            display: flex;
            /*设置子元素的主轴方向上的排列方式*/
            justify-content: space-around;
/*flex-shrink:定义收缩比例，通过设置的值来计算收缩空间
             比例值计算 ：当前空间的flex-shrink/所有兄弟元素的flex-shrink的和
            默认值为1*/
            flex-shrink: 2;

计算公式:把所有子元素的和 - 父元素/flex-shrink: 2 =分配的值
------------------------------flex-------------------


.box{
            width: 100%;
            height: 500px;
            background-color: #ccc;
            margin:0 auto;
            /*设置父容器的为伸缩盒子*/
            display: flex;
            /*设置子元素在主轴方向上的排列方式*/
            /*justify-content: flex-start;*/
        }
        .left{
            /*flex是用来设置当前伸缩子项占据剩余空间的比例值*/
            flex: 1;
            height: 500px;
            background-color: red;
        }
        .right{
            flex: 4;
            height: 500px;
            background-color: blue;
        }

---------------------------------------------
            /*设置父容器为盒子：会使每一个子元素自动变成伸缩项
             当子元素的宽度和大于父容器宽度的时候，子元素会自动平均收缩*/
            display: flex;
            /*设置子元素的主轴方向上的排列方式*/
            justify-content: space-around;
            /*align-items:设置子元素(伸缩项)在侧轴方向上的对齐方式
            center:设置在侧轴方向上居中对齐
            flex-start:设置在侧轴方向上顶对齐
            flex:end:设置在侧轴方向上底对齐
            stretch:拉伸：让子元素在侧轴方向上进行拉伸，填充满整个侧轴方向>> 默认值
            baseline:文本基线*/
------------------------------------------

  2D：
                transition:  属性名   过渡时间  延迟时间  动画速度  （steps(2)）
                transform: translate(x,y)
                transform: rotate(30deg)
                transform: scale(2)
                transform: skew(20deg)   了解

            3d:
                transform-style:preserve-3d;

---------------------------------------------
        1、动画的实现
            animation-name: moveTest;
            animation-duration: 2s;
		scale放大
            @keyframes  moveTest{
                0%{}
                20%{}
                100%{}
            }


        2、animation-fill-mode
            有延迟
                animation-fill-mode:forwards    0%动画不会立刻执行，结束时会停留在结束状态
                animation-fill-mode:backwards   0%动画会立刻执行，  结束时不会停留在结束状态
                animation-fill-mode:both        0%动画会立刻执行，  结束时会停留在结束状态

            没有延迟
                animation-fill-mode:forwards     0%动画会立刻执行，结束时会停留在结束状态
                animation-fill-mode:backwards    0%动画会立刻执行，  结束时不会停留在结束状态
                animation-fill-mode:both         0%动画会立刻执行，  结束时会停留在结束状态


 list-style: none;
            /*1.设置的名称*/
            animation-name: move;
            /*2.设置动画的耗时*/
            animation-duration: 7s;
            /*3.市场无限循环*/
            animation-iteration-count: infinite;
            /*4.设置时间函数*/
            animation-timing-function: linear;
        3、animation:动画名 动画时间  动画的延迟时间  动画的速度  次数(infinite)  forwards

            @keyframes  动画名{
                0%{}=====from{}
                100%{}=====to{}
            }
-------------------------------------------
        @keyframes Animation{
            from{
                transform: rotate3d(1,1,1,-30deg)  rotateY(0);
            }
            to{
                transform: rotate3d(1,1,1,-140deg) rotateY(360deg);
            }
        }
----------------------------------------------------------
        4、弹性布局    开启弹性布局===============display:flex
        父元素：
            display:flex
            justify-content:flex-start || flex-end ||  center || space-around(两边会有间距) ||  space-between(两边不会有间距)
            flex-wrap:wrap  显示换行
            flex-direction:column   竖直方向变成主轴水平方向变成侧轴       默认是flex-direction:row 水平方向为主轴

            align-items：flex-start  ||  center || flex-end
        子元素：
            flex-grow ||  flex-shrink     （不需要记住）
            flex：1    这个是占父盒子剩余空间的
            align-self: flex-start  ||  center || flex-end

        justify-content  左中右
        align-items     上中下





        使用animation+@keyframes   不需要你使用transition     因为@keyframes 有关键帧可以使动画连续
        a:active{
            加上旋转  此时不会产生有连续的动画  ====需要加上属性transition 
        }

-------------------------
border-left-color: red;
            border-right-color: black;
            border-top-color: yellow;
给边框加颜色
----------------------------